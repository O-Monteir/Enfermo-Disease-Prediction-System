# -*- coding: utf-8 -*-
"""Enfermo - Heart Disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/142FoTCx1Ofc0Apq1Bq4nGCvneL_1iuWz

Importing dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

#loading csv data to pandas dataframe
heart_data=pd.read_csv('/content/heart_disease_data.csv')

#reading first 5 rows of db
heart_data.head()

heart_data.tail()

#checking number of rows and columns
heart_data.shape

heart_data.info() #information of data set

#checking for missing values
heart_data.isnull().sum()

#statistical measure of data

heart_data.describe()

"""0----> person does not have heart disease
1----> person has heart disease
"""

#checking distribution of Target variables
heart_data['target'].value_counts()

"""Splitting the Features and the Target"""

x=heart_data.drop(columns='target',axis=1)
y=heart_data['target']

print(x)

print(y)

"""Splitting the data into training &n test data"""

x_train ,x_test ,y_train ,y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

"""Model Training

Logistic Regression
"""

model=LogisticRegression()

#training the LogisticRegression model with Training data
model.fit(x_train,y_train)
#finds relation between features and target

"""Model Evaluation

Accuracy Score
"""

#accuracy on training data
x_train_prediction= model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction,y_train)

print('Accuracy on Training Data : ', training_data_accuracy)

#accuracy on test data
x_test_prediction =model.predict(x_test)
test_data_accuracy=accuracy_score(x_test_prediction,y_test)

print('Accuracy on Test Data :', test_data_accuracy)

"""Building a Predictive System"""

input_data=(57 ,	0 ,	0 ,	140 ,	241 ,	0 ,	1 	,123, 	1 ,	0.2 ,	1 ,	0 ,	3)

#change the input data to a numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshaping the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshaped )

print(prediction)

if (prediction[0]==0):
  print("Person does not have heart disease")
else:
  print("Person has heart disease")

import pickle

filename='heart_model.sav'
pickle.dump(model,open(filename,'wb'))

#loading the saved model
loaded_model=pickle.load(open('heart_model.sav','rb'))

heart_data.dtypes

